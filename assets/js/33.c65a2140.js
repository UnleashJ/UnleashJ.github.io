(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{603:function(t,a,s){"use strict";s.r(a);var e=s(16),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("最近在学习Vue源码过程中，模板编译章节里碰到一些正则表达式及RegExp类的方法。包括开始标签、属性、结束标签、文本、注释等字符串的正在表达式。重新复习一下正则表达式的相关知识，做一下总结。")]),t._v(" "),s("h2",{attrs:{id:"定义正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义正则表达式"}},[t._v("#")]),t._v(" 定义正则表达式")]),t._v(" "),s("p",[t._v("在JavaScript中定义正则表达式有两种方式：")]),t._v(" "),s("ol",[s("li",[t._v("RegExp()构造函数来创建，接收一个字符串参数")]),t._v(" "),s("li",[t._v("字面量语法，包含在一对/之间的字符 /s$/")])]),t._v(" "),s("p",[t._v("在第二个斜杠后面可以设置标志字符，用于控制匹配的方式， "),s("code",[t._v("/s$/i")]),t._v("。或者将标志字符作为RegExp()构造函数的第二个参数，也可以控制匹配方式。")]),t._v(" "),s("h3",{attrs:{id:"字面量字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字面量字符"}},[t._v("#")]),t._v(" 字面量字符")]),t._v(" "),s("p",[t._v("所有字母字符和数字字符在正则表达式中都匹配自身的字面值。正则表达式语法通过反斜\\作为转义字符。如果想在正在表达式中使用以下英文标点符号的字符，也需要使用反斜杠（\\）进行转义（通用规则），因为单独使用他们有页数的含义，各个字符的单独使用时候的具体含义在后面中进行介绍。可以给所有标点字符前面都加上反斜杠（\\）。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("^ $ . * + + ? = ! : | \\ / ( ) [ ] { }\n")])])]),s("p",[s("strong",[t._v("如果使用RegExp构造函数，正则表达式中的任何反斜杠都要写两次，因为字符串也是用反斜杠作为转义字符（RegExp构造函数接收一个字符串参数）。")])]),t._v(" "),s("h3",{attrs:{id:"字符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[t._v("#")]),t._v(" 字符类")]),t._v(" "),s("p",[t._v("把一些字面量值放在方括号中可以组成字符类，匹配方括号中的任意字符。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/[abc]/ 匹配a、b、c中的任意一个字符\n/[^abc]/ 匹配非a、b、c中的任意一个字符\n")])])]),s("p",[t._v("一些常用的字符类可以使用特殊字符和转义序列进行表示：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("元字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://www.runoob.com/jsref/jsref-regexp-dot.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("."),s("OutboundLink")],1)]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找单个字符，除了换行和行结束符。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://www.runoob.com/jsref/jsref-regexp-wordchar.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("\\w"),s("OutboundLink")],1)]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找数字、字母及下划线。等价于"),s("code",[t._v("[a-zA-Z0-9_]")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://www.runoob.com/jsref/jsref-regexp-wordchar-non.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("\\W"),s("OutboundLink")],1)]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找非单词字符。等价于"),s("code",[t._v("[^a-zA-Z0-9_]")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://www.runoob.com/jsref/jsref-regexp-digit.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("\\d"),s("OutboundLink")],1)]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找数字。等价于"),s("code",[t._v("[0-9]")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://www.runoob.com/jsref/jsref-regexp-digit-non.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("\\D"),s("OutboundLink")],1)]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找非数字字符。等价于"),s("code",[t._v("[^0-9]")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://www.runoob.com/jsref/jsref-regexp-whitespace.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("\\s"),s("OutboundLink")],1)]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找空白字符。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://www.runoob.com/jsref/jsref-regexp-whitespace-non.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("\\S"),s("OutboundLink")],1)]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找非空白字符。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\p{…}")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Unicode字符类")])])])]),t._v(" "),s("h3",{attrs:{id:"重复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重复"}},[t._v("#")]),t._v(" 重复")]),t._v(" "),s("p",[t._v("重复说明符都应用给他们前面的一个字符或者字符类。如果想匹配更复杂的表达式，可以使用圆括号定义一个匹配组，后面介绍。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("{n,m}")]),t._v(" "),s("td",[t._v("匹配前项n到m次")])]),t._v(" "),s("tr",[s("td",[t._v("{n,}")]),t._v(" "),s("td",[t._v("匹配前项n次或更多次")])]),t._v(" "),s("tr",[s("td",[t._v("{n}")]),t._v(" "),s("td",[t._v("匹配前项n次")])]),t._v(" "),s("tr",[s("td",[t._v("?")]),t._v(" "),s("td",[t._v("匹配前项零次或一次，即有或没有，{0,1}")])]),t._v(" "),s("tr",[s("td",[t._v("+")]),t._v(" "),s("td",[t._v("匹配前项一次或多次，{1,}")])]),t._v(" "),s("tr",[s("td",[t._v("*")]),t._v(" "),s("td",[t._v("匹配前项任意次，{0,}")])])])]),t._v(" "),s("p",[t._v("这些重复字符会尽可能多地匹配（贪婪重复）。在重复字符后面加一个?，可以指定非贪婪重复。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a+?")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//['aaa', index: 0, input: 'aaa', groups: undefined]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//['a', index: 0, input: 'aaa', groups: undefined]")]),t._v("\n")])])]),s("p",[t._v("正则表达式模式的匹配会从字符串的第一个位置开始查找匹配项，下面的正则表达式因为在一开始就找到了匹配项，所以从后续字母开始更短的匹配项（ab）就不在考虑之列了。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a+?b")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaab"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//['aaab', index: 0, input: 'aaab', groups: undefined]")]),t._v("\n")])])]),s("h3",{attrs:{id:"任选、分组、引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任选、分组、引用"}},[t._v("#")]),t._v(" 任选、分组、引用")]),t._v(" "),s("p",[t._v("竖线字符|用于分隔任选模式。"),s("code",[t._v("/ab|cd|ef/")]),t._v('匹配“ab”、“cd”或者"ef"。如果竖线左边的任选模式匹配，则忽略右边的模式，即使右边的模式可以更好地匹配。')]),t._v(" "),s("br"),t._v(" "),s("p",[t._v("圆括号可以把独立的模式分组为子表达式，从而可以被重复说明符当做一个整体，如"),s("code",[t._v("/java(script)?/")]),t._v("。")]),t._v(" "),s("p",[t._v("圆括号的另一个作用是在完整的模式中定义"),s("strong",[t._v("子模式")]),t._v("。当正则表达式成功匹配一个目标字符串之后，可以从目标字符串中提取出与圆括号包含的子模式对应的部分。注意下面“+”位置不用，匹配的子模式文本也不同，一个是3，一个是123。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[a-z]+(\\d)+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[a-z]+(\\d+)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab123"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//['ab123', '3', index: 0, input: 'ab123', groups: undefined]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab123"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//['ab123', '123', index: 0, input: 'ab123', groups: undefined]")]),t._v("\n")])])]),s("p",[s("strong",[t._v("回引子表达式")]),t._v("，可以使用反斜杠加数字，如\\2表示回引第几个子表达式（位置按照左括号计算）。该引用方式引用的是模式匹配的文本，而不是表达式的模式。如"),s("code",[t._v("/(['\"])[^'\"]*\\1/")]),t._v("中的\\1引用的是前面第一个括号的具体文本：引号或者双引号；而不是模式"),s("code",[t._v("['\"]")]),t._v("。注意在字符类中使用引用是不合法的，"),s("code",[t._v("/(['\"])[^\\1]*\\1/")]),t._v("是错误的。如果不圆括号分组的子表达式生成数字引用，可以使用"),s("code",[t._v("(?:…)")])]),t._v(" "),s("br"),t._v(" "),s("p",[s("strong",[t._v("命名捕获组")]),t._v("，可以给每一个圆括号分组起一个名字，引用的时候使用该名字进行引用，可以更好的理解表达式的用途。使用"),s("code",[t._v("(?<name>…)")]),t._v("，分组名字放在<>中间，使用"),s("code",[t._v("\\k<name>")]),t._v("可以引用指定名字的模式。上面例子的可以重写为"),s("code",[t._v("/(?<quote>['\"])[^'\"]*\\k<quote>/")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"指定匹配位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定匹配位置"}},[t._v("#")]),t._v(" 指定匹配位置")]),t._v(" "),s("p",[t._v("有一些正则表达式符号匹配字符间的位置而非实际字符，如常见的^、$，分别锚定字符串开头和结尾的位置。\\b匹配单词边界，如"),s("code",[t._v("/\\bJava\\b/")]),t._v("匹配任意位置的单词Java，但不匹配JavaScript。\\B锚定与 非单词边界匹配的位置，如"),s("code",[t._v("/\\B[Ss]cript/")]),t._v("匹配JavaScript、postscript但不匹配script或Scripting。")]),t._v(" "),s("p",[t._v("使用任意表达式作为锚定条件，"),s("code",[t._v("(?=…)")]),s("strong",[t._v("向前查找断言")]),t._v("，其中的字符必须存在，但不会实际匹配。例如"),s("code",[t._v("/[Jj]ava([Ss]cript)?(?=\\:)/")]),t._v("这个模式匹配Java或JavaScript后面跟冒号的情况（但是冒号不会在匹配结果中）。"),s("code",[t._v("(?!…)")]),t._v("否定式向前查找断言，要求必须不存在断言中指定的字符。如："),s("code",[t._v("/Java(?!Script)/")]),t._v("表示匹配Java后面不是Script的字符。")]),t._v(" "),s("p",[s("strong",[t._v("向后查找断言")]),t._v("，"),s("code",[t._v("(?<=…)")]),t._v("，"),s("strong",[t._v("向后查找否定断言")]),s("code",[t._v("(?<!…)")])]),t._v(" "),s("h3",{attrs:{id:"标志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标志"}},[t._v("#")]),t._v(" 标志")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("符号")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("g")]),t._v(" "),s("td",[t._v("全局匹配")])]),t._v(" "),s("tr",[s("td",[t._v("i")]),t._v(" "),s("td",[t._v("表示模式匹配不区分大小写")])]),t._v(" "),s("tr",[s("td",[t._v("m")]),t._v(" "),s("td",[t._v("多行模式")])])])]),t._v(" "),s("h2",{attrs:{id:"模式匹配的字符串方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式匹配的字符串方法"}},[t._v("#")]),t._v(" 模式匹配的字符串方法")]),t._v(" "),s("h3",{attrs:{id:"search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#search"}},[t._v("#")]),t._v(" search()")]),t._v(" "),s("p",[t._v("接收一个正则表达式作为参数，返回第一个匹配项起点字符的位置，没有找到返回-1。若参数不是正则表达式，会把这个参数传给RegExp构造函数转换为正则表达式。search()方法不支持全局搜索，其正则表达式参数中的g会被忽略。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-1")]),t._v("\n")])])]),s("h3",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" replace()")]),t._v(" "),s("p",[t._v("接收一个正则表达式作为第一个参数，接收一个替换字符串作为第二个参数。如果正则表达式带全局标志g，则会替换调用字符串中的所有匹配项。如果replace()第一个参数不是正则表达式而是字符串，它不会调用RegExp构造函数转换为正则表达式，而是会按照字面值搜索。")]),t._v(" "),s("p",[t._v("replace()还可以引用正则表达式的括号分组。在替换字符串中用$加数字的形式进行引用。这两个字符就代表指定的子表达式，如下面这个例子，替换字符串参数 中通过"),s("code",[t._v("$n")]),t._v("引用了某个子表达式。替换过程还是会将匹配项与整个字符串进行替换。如果是命名捕获组，可以通过名字而非数字进行引用。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(['\"])([^'\"]*)\\1")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'He said \"Hello man\".'")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'《$2》'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'He said 《Hello man》.'")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<$1$2$1>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'He said <\"Hello man\">.'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<quote>['\"])(?<word>[^'\"]*)\\k<quote>")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**$<word>**'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'He said **Hello man**.'")]),t._v("\n\n")])])]),s("p",[t._v("第二个参数除了传替换字符串还可以传函数。该函数会接收到几个参数，第一个是匹配的整个文本，后面几个参数是捕获组匹配的子字符串，再接下来的参数是找到匹配项的位置，最后是调用replace方法的这个字符串。如果正则表达式有命名捕获组，还会收到一个参数，是一个对象，属性名是捕获组的名字，属性值是匹配的文本。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("我认为这种场景一般用于将匹配项进行简单换算后替换的情况，即函数不宜过于复杂，最好采用简单的箭头函数。")])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(['\"])([^'\"]*)\\1")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<quote>['\"])(?<word>[^'\"]*)\\k<quote>")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'He said \"Hello man\".'")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("a ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\nb ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\nc ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\nd ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\ne ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"喵喵喵"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\na "Hello man"\nb "\nc Hello man\nd 8\ne He said "Hello man".\n\'He said 喵喵喵.\'\n*/')]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//带命名捕获组的正则表达式")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("a ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\nb ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\nc ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\nd ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\ne ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"汪汪汪"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\na \"Hello man\"\nb \"\nc Hello man\nd 8\ne He said \"Hello man\".\n {quote: '\"', word: 'Hello man'}\n'He said 汪汪汪.'\n*/")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#match"}},[t._v("#")]),t._v(" match()")]),t._v(" "),s("p",[t._v("接受一个正则表达式参数，如果参数不是正则表达式会调用RegExp构造函数转为正则表达式。匹配返回一个数组，如果没有匹配返回null。")]),t._v(" "),s("p",[t._v("支持全局搜索g，此时返回的数组中只包含所有匹配项。")]),t._v(" "),s("p",[t._v("没有全局搜索标志则只会查找第一个匹配项，返回的数组第一个元素是匹配的字符串，剩下的是括号分组的捕获组匹配的子字符串。非全局搜索的情况下返回的数组还有一些对象属性，input引用调用match的字符串；index是匹配项的起始位置；groups对应一个对象，属性名是命名捕获组的 名字，属性值是匹配的文本。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解析URL的RegExp")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\w+):\\/\\/([\\w.]+)\\/(\\S*)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Vist my blog at https://unleashj.github.io/123"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//['https://unleashj.github.io/123', 'https', 'unleashj.github.io', '123', index: 16, input: 'Vist my blog at https://unleashj.github.io/123', groups: undefined]")]),t._v("\n")])])]),s("h3",{attrs:{id:"matchall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#matchall"}},[t._v("#")]),t._v(" matchAll()")]),t._v(" "),s("p",[t._v("接收一个带g标志的正则表达式，返回一个迭代器，每次迭代都产生一个与使用match得到的数组对象相同的对象。是循环遍历字符串中的所有匹配项的最简单最通用的方式。不会修改传入RegExp对象的lastIndex属性。")]),t._v(" "),s("h3",{attrs:{id:"split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#split"}},[t._v("#")]),t._v(" split()")]),t._v(" "),s("p",[t._v("使用的传入的参数作为分隔符，将调用它的字符串拆分为子字符串保存在数组中。")]),t._v(" "),s("h2",{attrs:{id:"regexp类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp类"}},[t._v("#")]),t._v(" RegExp类")]),t._v(" "),s("p",[t._v("RegExp()可以接收一个或两个参数，第一个参数一般是一个字符串，包含正则表达式的主体表达式（即//之间的部分），第一个参数也可以是一个RegExp对象，用于复用之前的正则表达式。第二个参数是可选的，是标志位。RegExp构造函数主要用于动态创建正则表达式。")]),t._v(" "),s("h3",{attrs:{id:"test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[t._v("#")]),t._v(" test()")]),t._v(" "),s("p",[s("code",[t._v("reg.test(str)")]),t._v("如果字符串与模式匹配则返回true ，否则返回false。内部是调用了exec方法实现的。")]),t._v(" "),s("h3",{attrs:{id:"exec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[t._v("#")]),t._v(" exec()")]),t._v(" "),s("p",[t._v("与字符串的match()方法类似。")])])}),[],!1,null,null,null);a.default=n.exports}}]);